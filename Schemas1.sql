-- ====================================
-- Amazon Project - Advanced SQL
-- ====================================
-- Business Problems - Advanced Analysis
-- ====================================

-- =====================
-- EDA (Exploratory Data Analysis)
-- =====================

SELECT * FROM category;
SELECT * FROM customers;
SELECT * FROM inventory;
SELECT * FROM order_items;
SELECT * FROM orders;
SELECT * FROM payments;

-- Checking distinct payment statuses
SELECT DISTINCT payment_status FROM payments;

SELECT * FROM sellers;
SELECT * FROM shippings;

-- Finding specific shipping details with return date
SELECT * FROM shippings 
WHERE return_date IS NOT NULL AND order_id = 1601;

-- Finding shippings with no return date
SELECT * FROM shippings 
WHERE return_date IS NULL;

-- Verifying data integrity for a specific order (Order ID: 1601)
SELECT * FROM orders WHERE order_id = 1601;
SELECT * FROM payments WHERE order_id = 1601;

-- ========================
-- Business Problems Solved
-- ========================

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/
-- Approach:
-- 1. Join `order_items`, `orders`, and `products`.
-- 2. Calculate total sales (quantity * price_per_unit).
-- 3. Group by product and aggregate total sales.
-- 4. Return the top 10 products.

-- Adding a `total_sale` column to the `order_items` table
ALTER TABLE order_items ADD COLUMN total_sale FLOAT;

-- Updating the `total_sale` column with calculated values
UPDATE order_items
SET total_sale = quantity * price_per_unit;

-- Query to find the top 10 products by sales value
SELECT 
    oi.product_id,
    p.product_name,
    SUM(oi.total_sale) AS total_sale,
    COUNT(o.order_id) AS total_orders
FROM orders AS o
JOIN order_items AS oi ON oi.order_id = o.order_id
JOIN products AS p ON p.product_id = oi.product_id
GROUP BY oi.product_id, p.product_name
ORDER BY total_sale DESC
LIMIT 10;

/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/
-- Approach:
-- 1. Join `order_items`, `products`, and `category`.
-- 2. Calculate total sales for each category.
-- 3. Calculate percentage contribution to total revenue.
-- 4. Group by category.

SELECT 
    p.category_id, 
    c.category_name,
    SUM(oi.total_sale) AS total_sale,
    SUM(oi.total_sale) / (SELECT SUM(total_sale) FROM order_items) * 100 AS contribution
FROM order_items AS oi
JOIN products AS p ON p.product_id = oi.product_id
LEFT JOIN category AS c ON c.category_id = p.category_id
GROUP BY p.category_id, c.category_name
ORDER BY total_sale DESC;

/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/
-- Approach:
-- 1. Join `orders`, `order_items`, and `customers`.
-- 2. Calculate total sales per customer.
-- 3. Divide total sales by the number of orders for AOV.
-- 4. Filter customers with more than 5 orders.

SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS full_name,
    SUM(oi.total_sale) / COUNT(o.order_id) AS AOV,
    COUNT(o.order_id) AS total_orders
FROM orders AS o
JOIN customers AS c ON c.customer_id = o.customer_id
JOIN order_items AS oi ON oi.order_id = o.order_id 
GROUP BY c.customer_id, full_name
HAVING COUNT(o.order_id) > 5;

/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current-month sales, and last-month sales.
*/
-- Approach:
-- 1. Aggregate sales by month for the last year.
-- 2. Use a window function (`LAG`) to find previous month's sales.
-- 3. Return current month and last month's sales.

SELECT 
    year,
    month, 
    total_sale AS current_month_sale,
    LAG(total_sale, 1) OVER (ORDER BY year, month) AS last_month_sale
FROM (
    SELECT 
        EXTRACT(YEAR FROM o.order_date) AS year,
        EXTRACT(MONTH FROM o.order_date) AS month,
        ROUND(SUM(oi.total_sale)::NUMERIC, 2) AS total_sale
    FROM orders AS o
    JOIN order_items AS oi ON oi.order_id = o.order_id
    WHERE o.order_date >= CURRENT_DATE - INTERVAL '1 year'
    GROUP BY year, month
    ORDER BY year, month
) AS monthly_sales;

/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/
-- Approach:
-- 1. Identify customers who are not in the `orders` table.
-- 2. Use a LEFT JOIN to find unmatched customers.
-- 3. Alternatively, use a subquery with NOT IN.

-- Approach 1: Using a subquery
SELECT * 
FROM customers 
WHERE customer_id NOT IN (
    SELECT DISTINCT customer_id 
    FROM orders
);

-- Approach 2: Using a LEFT JOIN
SELECT * 
FROM customers AS c
LEFT JOIN orders AS o ON o.customer_id = c.customer_id 
WHERE o.customer_id IS NULL;

-- =======================
-- End of Problems Solved
-- =======================
